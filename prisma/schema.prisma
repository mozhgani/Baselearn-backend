generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId      String   @id @unique @default(uuid())
  fullname    String?
  phoneNumber String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  role        Roles    @default(Customer)
  address     String?
  city        String?
  PostalCode  Int?
  email       String?  @unique
  profile     Profile?
  Order       Order[]
  Cart        Cart[]
  // Course      Course?  @relation(fields: [userId], references: [id])
}

model Profile {
  profileId String    @id @default(uuid())
  userId    String    @unique
  avatar    String?
  birthdate DateTime?
  user      User      @relation(fields: [userId], references: [userId])
}

model Role {
  roleId   String @id @default(uuid())
  roleName Roles  @default(Customer)
}

model Order {
  orderId     String      @id @unique @default(uuid()) @map("_id")
  userId      String
  orderDate   DateTime    @default(now())
  status      OrderStatus @default(PENDING)
  totalAmount Float
  items       OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  user        User        @relation(fields: [userId], references: [userId])
}

model OrderItem {
  itemId       String  @id @unique @default(uuid()) @map("_id")
  orderId      String
  productId    String
  quantity     Int
  price        Float
  Order        Order?  @relation(fields: [orderOrderId], references: [orderId])
  orderOrderId String?
}

model Cart {
  cartId    String     @id @unique @default(uuid()) @map("_id")
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  user      User       @relation(fields: [userId], references: [userId])
}

model CartItem {
  itemId     String  @id @unique @default(uuid()) @map("_id")
  cartId     String
  productId  String
  quantity   Int
  Cart       Cart?   @relation(fields: [cartCartId], references: [cartId])
  cartCartId String?
}

model Product {
  productId   String   @id @unique @default(uuid()) @map("_id")
  name        String
  description String
  price       Float
  inventory   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Course {
  id                String       @id @unique @default(uuid()) @map("_id")
  name              String
  price             Int
  image             String
  teacher           String       @default("نیما تاجیک")
  courseLevel       String
  NumberOfSessions  Int
  courseTime        Int
  courseStatus      COURSESTATUS @default(PRESELL)
  detailTitle       String
  detailDescription String
  veiws             Int
  // students          User[]
  topic             Topic[]
}

model Topic {
  id       String  @id @unique @default(uuid()) @map("_id")
  title    String
  meet     Meet[]
  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String?
}

model Meet {
  id      String  @id @unique @default(uuid()) @map("_id")
  title   String
  Topic   Topic?  @relation(fields: [topicId], references: [id])
  topicId String?
}

// Define a model for OTP
model OTP {
  id              String   @id @unique @default(uuid()) @map("_id")
  code            String   @unique
  createdAt       DateTime @default(now())
  expiresAt       DateTime
  userPhoneNumber String
}

model Article {
  id            String              @id @unique @default(uuid()) @map("_id")
  name          String
  description   String
  view          Int
  data          ArticleData         @relation(fields: [articleDataId], references: [id])
  topic         ArticleTopicModel[]
  articleDataId String
}

model ArticleData {
  id        String    @id @unique @default(uuid()) @map("_id")
  articleId String
  image     String
  text      String
  Article   Article[]
}

model ArticleTopicModel {
  id        String       @id @unique @default(uuid()) @map("_id")
  topic     ArticleTopic
  Article   Article?     @relation(fields: [articleId], references: [id])
  articleId String
}

// Enums
enum ArticleTopic {
  Javascript
  Nodejs
  Typescript
}

enum Roles {
  Admin
  Customer
}

enum OrderStatus {
  PENDING
  SUCSUSS
  FAILD
}

enum COURSESTATUS {
  RECORDING
  COMPLETED
  PRESELL
}